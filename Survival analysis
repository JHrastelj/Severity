# Survival analysis

## Useful code:
Removing duplicate lines in a file:  awk '!seen[$0]++' filename
'VLOOKUP' in linux bash:  join -1 x -2 y fileA fileB > fileAB #where the common field between the two files is field x in the first file (fileA) and field y in the second file (fileB) - on each row it will print the common field followed by the remaining fields of fileA followed by the remaining fields of fileB.
Findings differences between two files:  diff fileA fileB
Deleting rows containing a particular string e.g. rs123456:  sed '/rs123456/d' file > newfile
Deleting specific range of rows:  sed 'f,ld' file > newfile #where f is the first row to be deleted and l is the last
Finding common elements in two files:  awk 'NR==FNR{a[$1];next}$1 in a{print $1}' file1 file2 #builds first column of first file into an array then checks second file line-by-line for that value and prints it if it exists.  #can adjust to printing the whole line by changing to $0 at the end.
To get rid of incompatibility between sort and join:  LANG=en_EN sort -k 1,1 <myfile> ... then LANG=en_EN join ..
To sort a file but ignore the (single line) header:  (head -n 1 <file> && tail -n +2 <file> | sort) > newfile

## Phenotyping data

Aim is to assess correlation between SNP genotype and disability.

Helpful code to find matching lines:
awk 'NR==FNR{pats[$2]; next} $1 in pats' IDmatch Pheno > GenoPhen
where IDmatch file is GenotypeID and LocalID.

472 patients with disability data:  3 patients had local ID changed, 1 excluded due to missing date of onset, rest due to retrospective change in diagnosis.

Looked through clinical information to add accurate date of onset for the patient and added their data to pilotdisabilityfinal manually.
Updated the local ID of the two patients in LocalID file and IDmatch.

Removed those that were excluded by QC so that IDmatchx is GenotypingID and LocalID for only patients to be included in analysis.

awk ‘NR==FNR{pats[$1]; next} $2 in pats’ LocalID IDmatch > IDmatchx

We consider age at EDSS 6 to be the most robust outcome measure for disbaility accumulation in our dataset.

## Pilot survival analysis

Installation required:  SurvivalGWAS_SV (Open access command line based software:  https://www.liverpool.ac.uk/translational-medicine/research/statistical-genetics/survival-gwas-sv) and Mono (http://www.mono-project.com).

Method:  Genome-wide Cox proportional hazards analysis:  SNP genotypes vs age at EDSS 6.  Co-variates:  sex, AAO and onset type (ROMS vs PPMS).

Genotype file required = .gen or .impute or .vcf

Extracted those patients from bed, bim and fam files to be included in pilot analysis (476 patients):

./plink --noweb --bfile 2011_NomissHighMAFFunrelated2 --keep IDPilotGeno.txt --make-bed --out Pilot.geno

Where IDPilotGeno.txt is an extract from the fam file of only patients to be included in pilot analysis.

Converted bed, bim and fam files for final pilot cohort to .vcf files using plink:

./plink --noweb --bfile Pilot.geno --recode vcf-iid --out pilotgeno
Where vcf-iid creates file only with IID and discards FID.

Phenotype file required = sample.txt

Created sample file as below as excel file:

Sample_id Subject_id Missing Sex SurvivalTime CensoringIndicator Co-variate1 Co-variate2 Co-variate3 Co-variate4 Co-variate5

Sample_id = Genotyping ID
Subject_id = Genotyping ID
Missing = 0
Sex = 0 is female, 1 is male
SurvivalTime = age_edss6
CensoringIndicator = edss6_status (1 is reached, 0 is not reached)
Co-variate1 - Sex
Co-variate2 = AAO
Co-variate3 = groupCourse (0=ROMS, 1=PPMS)
Co-variate4 = PC1 from PCA with 1000 genomes data
Co-variate5 – PC2 from PCA with 1000 genomes data

Sorted it in excel to ensure patients are in the same order as specified in the .vcf file.

vi pilotpheno.txt
copied data in.

Changed delimiter to space:
tr '\t' ' ' pilotpheno.txt > pilotpheno2.txt

Run SurvivalGWAS_SV:

Command:
mono survivalgwas-sv.exe -gf=pilotgeno.vcf -sf=pilotpheno2.txt -threads=1 -t=age_edss6 -c=edss_status -cov=Sex,AAO,groupCourse,PC1,PC2 -lstart=0 -lstop=550318 -p=onlysnp -o=PilotSurvivalResults.txt

Create shell script for submitting job to ROCKS:

vi pilotsurvival.sh
---------
#!/bin/bash
#$ -o stdout
#$ -e stderr

MONO=/share/apps/mono-5.8.0.22/bin/mono
DIRECTORY=/home/wpmjh18
str1=0
str=550318
no_of_jobs=10
inc=`expr \( $str - $str1 \) \/ $no_of_jobs` 

nstart=`expr \( $SGE_TASK_ID - 1 \) \* $inc`
nstop=`expr $nstart + $inc - 1`

$MONO $DIRECTORY/survivalgwas-sv.exe -gf=$DIRECTORY/pilotgeno.vcf -sf=$DIRECTORY/pilotpheno2.txt -threads=1 -t=age_edss6 -c=edss6_status -cov=Gender,AAO,groupCourse,PC1,PC2 -lstart=$nstart -lstop=$nstop -m=cox -p=onlysnp -o=$DIRECTORY/PilotSurvivalResults${SGE_TASK_ID}.txt
---------

Submit job to ROCKS:
qsub -t1:10 pilotsurvival.sh

Ouput successful for 550282 SNPs - No output for 8 SNPs on X chromosome between positions 154774663-154929162.  Unclear why - will need to look at these SNPs in more detail.

## Adding chromosome numbering for Manhattan plot.

Made txt file in format - Chr SNP - from vcf file:
awk '{print $1,$2}' pilotgeno.vcf > piotChrSNP.txt

Deleted descriptive lines at top of file in txt editor.

Deleted 8 SNPs from pilotChrSNP.txt for which the analysis failed:
sed '/rs1/d' pilotChrSNP.txt > pilotChrSNP2.txt
sed '/rs2/d' pilotChrSNP2.txt > pilotChrSNP3.txt
etc.
OR delete the range of rows as they are contiguous:
sed 'f,ld' pilotChrSNP.txt > pilotChrSNP2.txt #where f is the first line to be deleted and l is the last

Sort files so compatible with join:
LANG=en_EN sort -k2 pilotChrSNP2.txt > pilotChrSNP2sorted.txt
LANG=en_EN sort -k1 PilotSurvivalResults.txt > PilotSurvivalResultssorted.txt

Join pilotChrSNP2.txt with PilotSurvivalResults.txt to add chromosome numbers:
join -1 2 -2 1 pilotChrSNP2sorted.txt PilotSurvivalResultssorted.txt > PilotSurvivalResultsChr.txt

Delete extra SNP column (4th column):
awk '{print $1,$2,$3,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17}' PilotSurvivalResultsChr.txt

Re-sort based on Chromosome number and bp position:
LANG=en_EN sort -k 2 PilotSurvivalResultsChr.txt > PilotSurvivalResultsChrOrdered.txt

Make file compatible with 'qqman' software in R:
awk '{print $1,$2,$3,$11}' PilotSurvivalResultsChrOrdered.txt > PilotSurvivalResultsManQQ.txt

Change 'Waldpv' to 'P' in header using text editor.

Convert all P values from exponential format:
awk '{printf("%s %s %s %.18f\n",$1,$2,$3,$4)}' PilotSurvivalResultsManQQ.txt > PilotSurvivalResultsManQQSorted.txt

Rank SNPs by P value:
LANG=en_EN sort -k 4 PilotSurvivalResultsManQQSorted.txt > PilotSurvivalResultsManQQSortedP.txt

## Manhattan plot and Q-Q plot in R

getwd()

install.packages("qqman")
require(qqman)

Need to make sure that the file to be read in is in the right format - 3 columns:  SNP, CHR, BP, P

SR <- read.table("PilotSurvivalResultsManQQ.txt", header=T)

head(SR)
SRn <- as.numeric(as.character(SR$P))

How many SNPs on each chromosome?
as.data.frame(table(SR))

Manhattan plot
jpeg("PilotSurvivalResultsManhattan2.jpg")
manhattan(SRn)
dev.off()

Q-Q plot
jpeg("PilotSurvivalResultsQQ.jpg")
qq(SRn)
dev.off()

## Creating Kaplan-Meier Curves for top SNPs

Need to extract genotype for each individual at each top SNP.

vi SNP1.txt
  rs--------

./plink --noweb --bfile Pilot.geno --extract SNP1.txt --recode --out SNP1
This creates .ped and .map files for only the SNPs listed in SNP1.txt - in this case just one SNP.

Then remove unwanted columns from .ped file:
awk '{print $2,$7,$8}' SNP1.ped > SNP1.txt

Then extract only those patients with genotype AA:
grep 'A A' SNP1.txt > SNP1AA.txt

Then extract only those patients with genotype AG:
grep 'A G' SNP1.txt > SNP1AG.txt

Then extract only those patients with genotype GG:
grep 'G G' SNP1.txt > SNP1GG.txt

Combine files together:
cat SNP1AA.txt SNP1AG.txt SNP1GG.txt > SNP1all.txt

Join this with phenotype file used for survival analysis - either use join command or manually using excel.
Then remove unwanted columns so you end up with the columns:  Subject_id Group_geno edss6_status age_edss6
Where Group_geno is 1=AA, 2=AG, 3=GG.

Then use R to plot Kaplan-Meier curves:

setwd("/Users/jameshrastelj/Desktop/James_Work/MS_Research/Severity/GWAS2011/SurvivalAnalysis")

library(ggplot2)
library(survival)

snp1 <- read.csv("SNP1all.csv", header=T)
snp1df <- data.frame(snp1)

head(snp1df)

model_fit <- survfit(Surv(age_edss6, edss6_status) ~ Group_geno, data=snp1df)

pdf("SNP1_Survival_Curve.pdf")
plot(model_fit, lty= c(1, 2, 3), xlab="Age (years)", ylab="Proportion of patients who have not reached EDSS 6", main="Kaplan-Meier Curves for SNP rs6517312")
legend("topright", c("Homozygous A", "Heterozygous", "Homozygous G"), lty=c(1, 2, 3))
dev.off()

Then need to repeat for each interesting SNP.
