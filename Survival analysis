# Notes:  Survival analysis

## Useful code:
Removing duplicate lines in a file:  awk '!seen[$0]++' filename
'VLOOKUP' in linux bash:  join -1 x -2 y fileA fileB > fileAB #where the common field between the two files is field x in the first file (fileA) and field y in the second file (fileB) - on each row it will print the common field followed by the remaining fields of fileA followed by the remaining fields of fileB.
Findings differences between two files:  diff fileA fileB
Deleting rows containing a particular string e.g. rs123456:  sed '/rs123456/d' file > newfile
Deleting specific range of rows:  sed 'f,ld' file > newfile #where f is the first row to be deleted and l is the last
Finding common elements in two files:  awk 'NR==FNR{a[$1];next}$1 in a{print $1}' file1 file2 #builds first column of first file into an array then checks second file line-by-line for that value and prints it if it exists.  #can adjust to printing the whole line by changing to $0 at the end.
To get rid of incompatibility between sort and join:  LANG=en_EN sort -k 1,1 <myfile> ... then LANG=en_EN join ..
To sort a file but ignore the (single line) header:  (head -n 1 <file> && tail -n +2 <file> | sort) > newfile
To replace a value in a column with a different value (like excel =IF($6=0,2,1):  awk '{ $6 = ($6 == 0 ? 2 : $6) } 1' tmp > tmp2
To make substitutions in R:  gsub("GSA", "", IDs) - substitutes any occurance of "GSA" for nothing (i.e. deletes it) in the data.frame IDs
To combine columns in R:
> DF = data.frame(A = LETTERS[1:10], B = LETTERS[11:20])
> DF$C = paste(DF$A, DF$B, sep="_")
> head(DF)
  A B  C
1 A K A_K
2 B L B_L
3 C M C_M



## Phenotyping data

Aim is to assess correlation between SNP genotype and disability.

Helpful code to find matching lines:
awk 'NR==FNR{pats[$2]; next} $1 in pats' IDmatch Pheno > GenoPhen
where IDmatch file is GenotypeID and LocalID.

472 patients with disability data:  3 patients had local ID changed, 1 excluded due to missing date of onset, rest due to retrospective change in diagnosis.

Looked through clinical information to add accurate date of onset for the patient and added their data to pilotdisabilityfinal manually.
Updated the local ID of the two patients in LocalID file and IDmatch.

Removed those that were excluded by QC so that IDmatchx is GenotypingID and LocalID for only patients to be included in analysis.

awk ‘NR==FNR{pats[$1]; next} $2 in pats’ LocalID IDmatch > IDmatchx

We consider age at EDSS 6 to be the most robust outcome measure for disbaility accumulation in our dataset.

## Pilot survival analysis

Installation required:  SurvivalGWAS_SV (Open access command line based software:  https://www.liverpool.ac.uk/translational-medicine/research/statistical-genetics/survival-gwas-sv) and Mono (http://www.mono-project.com).

Method:  Genome-wide Cox proportional hazards analysis:  SNP genotypes vs age at EDSS 6.  Co-variates:  sex, AAO and onset type (ROMS vs PPMS).

Genotype file required = .gen or .impute or .vcf

Extracted those patients from bed, bim and fam files to be included in pilot analysis (476 patients):

./plink --noweb --bfile 2011_NomissHighMAFFunrelated2 --keep IDPilotGeno.txt --make-bed --out Pilot.geno

Where IDPilotGeno.txt is an extract from the fam file of only patients to be included in pilot analysis.

Converted bed, bim and fam files for final pilot cohort to .vcf files using plink:

./plink --noweb --bfile Pilot.geno --recode vcf-iid --out pilotgeno
Where vcf-iid is used to identify individuals rather than FID.

Phenotype file required = sample.txt

Created sample file as below as excel file:

Sample_id Subject_id Missing Sex SurvivalTime CensoringIndicator Co-variate1 Co-variate2 Co-variate3 Co-variate4 Co-variate5

Sample_id = Genotyping ID
Subject_id = Genotyping ID
Missing = 0
Sex = 0 is female, 1 is male
SurvivalTime = age_edss6
CensoringIndicator = edss6_status (1 is reached, 0 is not reached)
Co-variate1 - Sex
Co-variate2 = AAO
Co-variate3 = groupCourse (0=ROMS, 1=PPMS)
Co-variate4 = PC1 from PCA with 1000 genomes data
Co-variate5 – PC2 from PCA with 1000 genomes data

Sorted it in excel to ensure patients are in the same order as specified in the .vcf file.

vi pilotpheno.txt
copied data in.

Changed delimiter to space:
cat pilotpheno.txt | tr '\t' ' ' pilotpheno.txt > pilotpheno2.txt

Run SurvivalGWAS_SV:

Command:
mono survivalgwas-sv.exe -gf=pilotgeno.vcf -sf=pilotpheno2.txt -threads=1 -t=age_edss6 -c=edss_status -cov=Sex,AAO,groupCourse,PC1,PC2 -lstart=0 -lstop=550318 -p=onlysnp -o=PilotSurvivalResults.txt

Create shell script for submitting job to ROCKS:

vi pilotsurvival.sh
---------
#!/bin/bash
#$ -o stdout
#$ -e stderr

MONO=/share/apps/mono-5.8.0.22/bin/mono
DIRECTORY=/home/wpmjh18
str1=0
str=550318
no_of_jobs=10
inc=`expr \( $str - $str1 \) \/ $no_of_jobs` 

nstart=`expr \( $SGE_TASK_ID - 1 \) \* $inc`
nstop=`expr $nstart + $inc - 1`

$MONO $DIRECTORY/survivalgwas-sv.exe -gf=$DIRECTORY/pilotgeno.vcf -sf=$DIRECTORY/pilotpheno2.txt -threads=1 -t=age_edss6 -c=edss6_status -cov=Gender,AAO,groupCourse,PC1,PC2 -lstart=$nstart -lstop=$nstop -m=cox -p=onlysnp -o=$DIRECTORY/PilotSurvivalResults${SGE_TASK_ID}.txt
---------

Submit job to ROCKS:
qsub -t 1:10 pilotsurvival.sh

----

# Script for converting output from SurvivalGWAS_SV to format that can be read into R for creating Manhattan and Q-Q plots
# Ensure script is in same directory as results files and .vcf file used for survival analysis

#!/bin/bash
set -a LANG=en_EN

# Outputs: all_${SURVDATA}.txt, ${GENO}_chrSNP.txt, ${GENO}_chrSNPsorted.txt, ${SURVDATA}_sorted.txt, ${SURVDATA}_ManQQ.txt, ${SURVDATA}_ManQQ_Psorted.txt

# GENO is name of .bim file used to make .vcf in survival analysis
GENO=pilot400_geno
# SURVDATA is name of survival analysis results file without "1-10.txt"
SURVDATA=PilotTimeSurvivalResultsNew

# Combine all results files into one file
cat ${SURVDATA}*.txt > all_${SURVDATA}.txt

# Need to annotate results with chromosome numbers
# Create file containing list of SNPs with chromosomes
/usr/bin/awk '{print $1,$3}' ${GENO}.vcf > ${GENO}_chrSNP.txt

# Sort both files so compatible with join
LANG=en_EN sort -k2 ${GENO}_chrSNP.txt > ${GENO}_chrSNPsorted.txt
LANG=en_EN sort -k1 all_${SURVDATA}.txt > ${SURVDATA}_sorted.txt

# Join files to add chromosome number annotation
LANG=en_EN join -1 2 -2 1 ${GENO}_chrSNPsorted.txt ${SURVDATA}_sorted.txt > tmp

# Remove unwanted fields
/usr/bin/awk '{print $1,$2,$3,$13}' tmp > tmp2

# Sort by chromosome and BP position
LANG=en_EN sort -k2,2n -k3,3n tmp2 > tmp3

# Convert all P values from exponential
/usr/bin/awk '{printf("%s %s %s %.18f\n",$1,$2,$3,$4)}' tmp3 > ${SURVDATA}_ManQQ.txt

# Rank SNPs by P value
LANG=en_EN sort -k4 ${SURVDATA}_ManQQ.txt > ${SURVDATA}_ManQQ_Psorted.txt

# Add header to results files
echo 'SNP CHR BP P' > header.txt
cat ${SURVDATA}_ManQQ.txt >> header.txt
mv header.txt ${SURVDATA}_ManQQ.txt

echo 'SNP CHR BP P' > header.txt
cat ${SURVDATA}_ManQQ_Psorted.txt >> header.txt
mv header.txt ${SURVDATA}_ManQQ_Psorted.txt

# Delete tmp files
rm tmp
rm tmp2
rm tmp3

----

## Manhattan plot and Q-Q plot in R

getwd()

install.packages("qqman")
require(qqman)

SR <- read.table("PilotSurvivalResults_ManQQ.txt", header=T)

head(SR)
SRn <- as.numeric(as.character(SR$P))

Manhattan plot
jpeg("PilotSurvivalResultsManhattan.jpg")
manhattan(SRn)
dev.off()

Q-Q plot
jpeg("PilotSurvivalResultsQQ.jpg")
qq(SRn)
dev.off()

## Creating Kaplan-Meier Curves for top SNPs

Need to extract genotype for each individual at each top SNP.

vi SNP1.txt
  rs--------

./plink --noweb --bfile Pilot.geno --extract SNP1.txt --recode --out SNP1
This creates .ped and .map files for only the SNPs listed in SNP1.txt - in this case just one SNP.

Then remove unwanted columns from .ped file:
awk '{print $2,$7,$8}' SNP1.ped > SNP1.txt

Check nucleotide for effect and non-effect alleles:
grep 'rs-------' PilotSurvivalResults.txt

Then extract only those patients with genotype AA:
grep 'A A' SNP1.txt > SNP1AA.txt

Then extract only those patients with genotype AG:
grep 'A G' SNP1.txt > SNP1AG.txt

Then extract only those patients with genotype GG:
grep 'G G' SNP1.txt > SNP1GG.txt

Check numbers of homozygous A, heterozygous and homozygous G in pilot cohort:
wc -l SNP1AA.txt
wc -l SNP1AG.txt
wc -l SNP1GG.txt

Combine files together:
cat SNP1AA.txt SNP1AG.txt SNP1GA.txt SNP1GG.txt > SNP1all.txt

Join this with phenotype file used for survival analysis - either use join command or manually using excel.
Then remove unwanted columns so you end up with the columns:  Subject_id Group_geno edss6_status age_edss6
Where Group_geno is 1=AA, 2=AG, 3=GG.

Then use R to plot Kaplan-Meier curves:

setwd("/Users/jameshrastelj/Desktop/James_Work/MS_Research/Severity/GWAS2011/SurvivalAnalysis")

library(ggplot2)
library(survival)

snp1 <- read.csv("SNP1.csv", header=T)
snp1df <- data.frame(snp1)

head(snp1df)

model_fit <- survfit(Surv(age_edss6, edss6_status) ~ Group_geno, data=snp1df)

pdf("SNP1_Survival_Curve.pdf")
plot(model_fit, lty= c(1, 2, 3), xlab="Age (years)", ylab="Proportion of patients who have not reached EDSS 6", main="Kaplan-Meier Curves for SNP rs6517312")
legend("topright", c("Homozygous A", "Heterozygous", "Homozygous G"), lty=c(1, 2, 3))
dev.off()

Then need to repeat for each interesting SNP.

NB:  Had to delete 95328_A06 from SNP5 and 89807_G10 from SNP19 because genotype was 0 0
